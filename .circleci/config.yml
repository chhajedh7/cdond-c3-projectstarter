version: 2.1

orbs:
  slack: circleci/slack@4.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'  

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${workflow_id}
            aws s3 rm s3://udapeople-${workflow_id} --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${workflow_id}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm ci
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm ci
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
       - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend && npm ci && npm run test

                
  test-backend:
    docker:
       - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend && npm ci && npm run test
            
  scan-frontend:
    docker:
       - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse frontend
          command: |
            cd frontend && npm ci && npm audit fix && npm audit --audit-level=moderate          

  scan-backend:
    docker:
       - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse backend
          command: |
            cd backend && npm ci && npm audit fix && npm audit --audit-level=moderate     
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
              --stack-name udapeople-backend-${workflow_id} \
              --parameter-overrides ID=${workflow_id}
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name udapeople-frontend-${workflow_id} \
              --parameter-overrides ID=${workflow_id}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${workflow_id} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${workflow_id}
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'SHA256:GiSjBbXjxKGcVEGvBClnfqsyPc+l0N67i7s0eoM77bU'
      # attach workspace
      - run:
          name: Install dependencies
          command: |
           apk add --update --no-cache tar gzip ansible aws-cli
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend 
      - destroy-environment:
          workflow_id: ${workflow_id}
  run-migrations:
    docker:
      - image: cimg/node:21.6.1 # safest to use to avoid migration errors
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm ci
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/VKBqgKgF1PWBzbv6fNyZY2/migration_${workflow_id} -d '1'
            fi
      - destroy-environment:
          workflow_id: ${workflow_id}

  

  deploy-frontend:
    docker:
        - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${workflow_id} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend && npm ci && npm audit fix && npm audit --audit-level=moderate
            mkdir dist  # Create dist directory if not exist
            tar -czvf artifact-"${workflow_id}".tar.gz dist
            aws s3 cp dist s3://udapeople-${workflow_id} --recursive
            destroy-environment:
              workflow_id: ${workflow_id}
      - revert-migrations:
          workflow_id: ${workflow_id}                   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
